{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class NutritionService {\n  constructor(http) {\n    this.http = http;\n    this.API_BASE_URL = 'https://interview.workcentrix.de/ingredients.php';\n    this.BASIC_AUTH = 'Basic ' + btoa('name:password'); // Replace with real credentials if needed\n  }\n  /**\n   * Fetch nutrition information for an ingredient using Basic Auth\n   * @param ingredientName - The name of the ingredient to search for\n   * @returns Observable of NutritionInfo\n   */\n  getNutritionInfo(ingredientName) {\n    const params = new HttpParams().set('ingredient', ingredientName);\n    const headers = new HttpHeaders({\n      'Authorization': this.BASIC_AUTH\n    });\n    return this.http.get(this.API_BASE_URL, {\n      headers,\n      params\n    }).pipe(map(response => this.parseNutritionResponse(response)), catchError(err => {\n      if (err.status === 404) {\n        return throwError(() => ({\n          notFound: true\n        }));\n      }\n      return throwError(() => err);\n    }));\n  }\n  /**\n   * Add a new ingredient to the API\n   */\n  addIngredient(ingredient) {\n    const headers = new HttpHeaders({\n      'Authorization': this.BASIC_AUTH,\n      'Content-Type': 'application/x-www-form-urlencoded'\n    });\n    const body = new URLSearchParams();\n    body.set('name', ingredient.name);\n    body.set('carbs', ingredient.carbs.toString());\n    body.set('fat', ingredient.fat.toString());\n    body.set('protein', ingredient.protein.toString());\n    return this.http.post(this.API_BASE_URL, body.toString(), {\n      headers\n    });\n  }\n  /**\n   * Try to get nutrition info, and if not found, add it and then fetch again\n   */\n  getOrAddIngredient(ingredient) {\n    return this.getNutritionInfo(ingredient.name).pipe(catchError(err => {\n      if (err.notFound) {\n        // Add and then fetch again\n        return this.addIngredient(ingredient).pipe(switchMap(() => this.getNutritionInfo(ingredient.name)));\n      }\n      return throwError(() => err);\n    }));\n  }\n  /**\n   * Parse the API response to extract nutrition information\n   */\n  parseNutritionResponse(response) {\n    // The API returns a JSON object with nutritional values\n    return {\n      carbs: Number(response.carbs),\n      fat: Number(response.fat),\n      protein: Number(response.protein)\n    };\n  }\n  /**\n   * Submit two new ingredients (for demo/testing)\n   */\n  submitTwoIngredients() {\n    const ing1 = {\n      name: 'DemoIngredient1',\n      carbs: 10,\n      fat: 2,\n      protein: 3\n    };\n    const ing2 = {\n      name: 'DemoIngredient2',\n      carbs: 20,\n      fat: 5,\n      protein: 7\n    };\n    return this.addIngredient(ing1).pipe(switchMap(res1 => this.addIngredient(ing2).pipe(map(res2 => [res1, res2]))), catchError(err => {\n      console.error('Error submitting demo ingredients:', err);\n      return throwError(() => err);\n    }));\n  }\n  static {\n    this.ɵfac = function NutritionService_Factory(t) {\n      return new (t || NutritionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NutritionService,\n      factory: NutritionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","HttpParams","throwError","catchError","map","switchMap","NutritionService","constructor","http","API_BASE_URL","BASIC_AUTH","btoa","getNutritionInfo","ingredientName","params","set","headers","get","pipe","response","parseNutritionResponse","err","status","notFound","addIngredient","ingredient","body","URLSearchParams","name","carbs","toString","fat","protein","post","getOrAddIngredient","Number","submitTwoIngredients","ing1","ing2","res1","res2","console","error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/abdulhabeeb/recipe/src/app/services/nutrition.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nexport interface NutritionInfo {\n    carbs: number;\n    fat: number;\n    protein: number;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NutritionService {\n    private readonly API_BASE_URL = 'https://interview.workcentrix.de/ingredients.php';\n    private readonly BASIC_AUTH = 'Basic ' + btoa('name:password'); // Replace with real credentials if needed\n\n    constructor(private http: HttpClient) { }\n\n    /**\n     * Fetch nutrition information for an ingredient using Basic Auth\n     * @param ingredientName - The name of the ingredient to search for\n     * @returns Observable of NutritionInfo\n     */\n    getNutritionInfo(ingredientName: string): Observable<NutritionInfo> {\n        const params = new HttpParams().set('ingredient', ingredientName);\n        const headers = new HttpHeaders({\n            'Authorization': this.BASIC_AUTH\n        });\n        return this.http.get<any>(this.API_BASE_URL, { headers, params }).pipe(\n            map(response => this.parseNutritionResponse(response)),\n            catchError(err => {\n                if (err.status === 404) {\n                    return throwError(() => ({ notFound: true }));\n                }\n                return throwError(() => err);\n            })\n        );\n    }\n\n    /**\n     * Add a new ingredient to the API\n     */\n    addIngredient(ingredient: { name: string; carbs: number; fat: number; protein: number }): Observable<any> {\n        const headers = new HttpHeaders({\n            'Authorization': this.BASIC_AUTH,\n            'Content-Type': 'application/x-www-form-urlencoded'\n        });\n        const body = new URLSearchParams();\n        body.set('name', ingredient.name);\n        body.set('carbs', ingredient.carbs.toString());\n        body.set('fat', ingredient.fat.toString());\n        body.set('protein', ingredient.protein.toString());\n        return this.http.post(this.API_BASE_URL, body.toString(), { headers });\n    }\n\n    /**\n     * Try to get nutrition info, and if not found, add it and then fetch again\n     */\n    getOrAddIngredient(ingredient: { name: string; carbs: number; fat: number; protein: number }): Observable<NutritionInfo> {\n        return this.getNutritionInfo(ingredient.name).pipe(\n            catchError(err => {\n                if (err.notFound) {\n                    // Add and then fetch again\n                    return this.addIngredient(ingredient).pipe(\n                        switchMap(() => this.getNutritionInfo(ingredient.name))\n                    );\n                }\n                return throwError(() => err);\n            })\n        );\n    }\n\n    /**\n     * Parse the API response to extract nutrition information\n     */\n    private parseNutritionResponse(response: any): NutritionInfo {\n        // The API returns a JSON object with nutritional values\n        return {\n            carbs: Number(response.carbs),\n            fat: Number(response.fat),\n            protein: Number(response.protein)\n        };\n    }\n\n    /**\n     * Submit two new ingredients (for demo/testing)\n     */\n    submitTwoIngredients(): Observable<any[]> {\n        const ing1 = { name: 'DemoIngredient1', carbs: 10, fat: 2, protein: 3 };\n        const ing2 = { name: 'DemoIngredient2', carbs: 20, fat: 5, protein: 7 };\n        return this.addIngredient(ing1).pipe(\n            switchMap(res1 => this.addIngredient(ing2).pipe(\n                map(res2 => [res1, res2])\n            )),\n            catchError(err => {\n                console.error('Error submitting demo ingredients:', err);\n                return throwError(() => err);\n            })\n        );\n    }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}