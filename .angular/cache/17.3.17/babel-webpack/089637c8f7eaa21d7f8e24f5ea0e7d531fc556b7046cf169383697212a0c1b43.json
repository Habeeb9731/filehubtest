{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class NutritionService {\n  constructor(http) {\n    this.http = http;\n    // Replace these with your actual API credentials\n    this.APP_ID = 'YOUR_APP_ID';\n    this.APP_KEY = 'YOUR_APP_KEY';\n    this.API_BASE_URL = 'https://api.edamam.com/api/food-database/v2';\n  }\n  /**\n   * Fetch nutrition information for an ingredient using Basic Auth\n   * @param ingredientName - The name of the ingredient to search for\n   * @returns Observable of NutritionInfo\n   */\n  getNutritionInfo(ingredientName) {\n    const url = `${this.API_BASE_URL}/parser`;\n    const params = {\n      app_id: this.APP_ID,\n      app_key: this.APP_KEY,\n      ingr: ingredientName\n    };\n    // Create Basic Auth headers\n    const headers = new HttpHeaders({\n      'Authorization': `Basic ${btoa(`${this.APP_ID}:${this.APP_KEY}`)}`,\n      'Content-Type': 'application/json'\n    });\n    return this.http.get(url, {\n      headers,\n      params\n    }).pipe(map(response => this.parseNutritionResponse(response)), catchError(error => {\n      console.error('Error fetching nutrition info:', error);\n      // Return mock data as fallback\n      return of(this.getMockNutritionInfo(ingredientName));\n    }));\n  }\n  /**\n   * Parse the API response to extract nutrition information\n   */\n  parseNutritionResponse(response) {\n    if (response.foods && response.foods.length > 0) {\n      const food = response.foods[0].food;\n      const nutrients = food.nutrients;\n      return {\n        calories: nutrients.ENERC_KCAL || 0,\n        protein: nutrients.PROCNT || 0,\n        carbs: nutrients.CHOCDF || 0,\n        fat: nutrients.FAT || 0,\n        fiber: nutrients.FIBTG || 0\n      };\n    }\n    return this.getMockNutritionInfo('unknown');\n  }\n  /**\n   * Generate mock nutrition data for demo purposes\n   */\n  getMockNutritionInfo(ingredientName) {\n    // Generate consistent mock data based on ingredient name\n    const hash = this.hashCode(ingredientName);\n    const random = (min, max) => {\n      return min + hash % (max - min + 1);\n    };\n    return {\n      calories: random(50, 300),\n      protein: random(2, 25),\n      carbs: random(5, 40),\n      fat: random(1, 20),\n      fiber: random(1, 10)\n    };\n  }\n  /**\n   * Simple hash function to generate consistent mock data\n   */\n  hashCode(str) {\n    let hash = 0;\n    if (str.length === 0) return hash;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = (hash << 5) - hash + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash);\n  }\n  /**\n   * Calculate total nutrition for multiple ingredients\n   */\n  calculateTotalNutrition(ingredients) {\n    return ingredients.reduce((total, ingredient) => {\n      if (ingredient.nutrition) {\n        total.calories += ingredient.nutrition.calories;\n        total.protein += ingredient.nutrition.protein;\n        total.carbs += ingredient.nutrition.carbs;\n        total.fat += ingredient.nutrition.fat;\n        total.fiber += ingredient.nutrition.fiber;\n      }\n      return total;\n    }, {\n      calories: 0,\n      protein: 0,\n      carbs: 0,\n      fat: 0,\n      fiber: 0\n    });\n  }\n  /**\n   * Format nutrition values for display\n   */\n  formatNutritionValue(value, unit = 'g') {\n    return `${Math.round(value * 10) / 10}${unit}`;\n  }\n  /**\n   * Get nutrition summary text\n   */\n  getNutritionSummary(nutrition) {\n    const {\n      calories,\n      protein,\n      carbs,\n      fat\n    } = nutrition;\n    return `${calories} calories, ${protein}g protein, ${carbs}g carbs, ${fat}g fat`;\n  }\n  static {\n    this.ɵfac = function NutritionService_Factory(t) {\n      return new (t || NutritionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NutritionService,\n      factory: NutritionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","of","catchError","map","NutritionService","constructor","http","APP_ID","APP_KEY","API_BASE_URL","getNutritionInfo","ingredientName","url","params","app_id","app_key","ingr","headers","btoa","get","pipe","response","parseNutritionResponse","error","console","getMockNutritionInfo","foods","length","food","nutrients","calories","ENERC_KCAL","protein","PROCNT","carbs","CHOCDF","fat","FAT","fiber","FIBTG","hash","hashCode","random","min","max","str","i","char","charCodeAt","Math","abs","calculateTotalNutrition","ingredients","reduce","total","ingredient","nutrition","formatNutritionValue","value","unit","round","getNutritionSummary","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/abdulhabeeb/recipe/src/app/services/nutrition.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\nexport interface NutritionInfo {\n    calories: number;\n    protein: number;\n    carbs: number;\n    fat: number;\n    fiber: number;\n}\n\nexport interface NutritionApiResponse {\n    foods: Array<{\n        food: {\n            nutrients: {\n                ENERC_KCAL: number;\n                PROCNT: number;\n                CHOCDF: number;\n                FAT: number;\n                FIBTG: number;\n            };\n        };\n    }>;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NutritionService {\n    // Replace these with your actual API credentials\n    private readonly APP_ID = 'YOUR_APP_ID';\n    private readonly APP_KEY = 'YOUR_APP_KEY';\n    private readonly API_BASE_URL = 'https://api.edamam.com/api/food-database/v2';\n\n    constructor(private http: HttpClient) { }\n\n    /**\n     * Fetch nutrition information for an ingredient using Basic Auth\n     * @param ingredientName - The name of the ingredient to search for\n     * @returns Observable of NutritionInfo\n     */\n    getNutritionInfo(ingredientName: string): Observable<NutritionInfo> {\n        const url = `${this.API_BASE_URL}/parser`;\n        const params = {\n            app_id: this.APP_ID,\n            app_key: this.APP_KEY,\n            ingr: ingredientName\n        };\n\n        // Create Basic Auth headers\n        const headers = new HttpHeaders({\n            'Authorization': `Basic ${btoa(`${this.APP_ID}:${this.APP_KEY}`)}`,\n            'Content-Type': 'application/json'\n        });\n\n        return this.http.get<NutritionApiResponse>(url, { headers, params }).pipe(\n            map(response => this.parseNutritionResponse(response)),\n            catchError(error => {\n                console.error('Error fetching nutrition info:', error);\n                // Return mock data as fallback\n                return of(this.getMockNutritionInfo(ingredientName));\n            })\n        );\n    }\n\n    /**\n     * Parse the API response to extract nutrition information\n     */\n    private parseNutritionResponse(response: NutritionApiResponse): NutritionInfo {\n        if (response.foods && response.foods.length > 0) {\n            const food = response.foods[0].food;\n            const nutrients = food.nutrients;\n\n            return {\n                calories: nutrients.ENERC_KCAL || 0,\n                protein: nutrients.PROCNT || 0,\n                carbs: nutrients.CHOCDF || 0,\n                fat: nutrients.FAT || 0,\n                fiber: nutrients.FIBTG || 0\n            };\n        }\n\n        return this.getMockNutritionInfo('unknown');\n    }\n\n    /**\n     * Generate mock nutrition data for demo purposes\n     */\n    private getMockNutritionInfo(ingredientName: string): NutritionInfo {\n        // Generate consistent mock data based on ingredient name\n        const hash = this.hashCode(ingredientName);\n        const random = (min: number, max: number) => {\n            return min + (hash % (max - min + 1));\n        };\n\n        return {\n            calories: random(50, 300),\n            protein: random(2, 25),\n            carbs: random(5, 40),\n            fat: random(1, 20),\n            fiber: random(1, 10)\n        };\n    }\n\n    /**\n     * Simple hash function to generate consistent mock data\n     */\n    private hashCode(str: string): number {\n        let hash = 0;\n        if (str.length === 0) return hash;\n        for (let i = 0; i < str.length; i++) {\n            const char = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + char;\n            hash = hash & hash; // Convert to 32-bit integer\n        }\n        return Math.abs(hash);\n    }\n\n    /**\n     * Calculate total nutrition for multiple ingredients\n     */\n    calculateTotalNutrition(ingredients: Array<{ nutrition?: NutritionInfo }>): NutritionInfo {\n        return ingredients.reduce((total, ingredient) => {\n            if (ingredient.nutrition) {\n                total.calories += ingredient.nutrition.calories;\n                total.protein += ingredient.nutrition.protein;\n                total.carbs += ingredient.nutrition.carbs;\n                total.fat += ingredient.nutrition.fat;\n                total.fiber += ingredient.nutrition.fiber;\n            }\n            return total;\n        }, {\n            calories: 0,\n            protein: 0,\n            carbs: 0,\n            fat: 0,\n            fiber: 0\n        });\n    }\n\n    /**\n     * Format nutrition values for display\n     */\n    formatNutritionValue(value: number, unit: string = 'g'): string {\n        return `${Math.round(value * 10) / 10}${unit}`;\n    }\n\n    /**\n     * Get nutrition summary text\n     */\n    getNutritionSummary(nutrition: NutritionInfo): string {\n        const { calories, protein, carbs, fat } = nutrition;\n        return `${calories} calories, ${protein}g protein, ${carbs}g carbs, ${fat}g fat`;\n    }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}