{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class NutritionService {\n  constructor(http) {\n    this.http = http;\n    this.API_BASE_URL = 'https://api.abdulhabeeb.de/api/ingredients';\n  }\n  /**\n   * Fetch nutrition information for an ingredient\n   * @param ingredientName - The name of the ingredient to search for\n   * @returns Observable of NutritionInfo\n   */\n  getNutritionInfo(ingredientName) {\n    const params = new HttpParams().set('ingredient', ingredientName);\n    return this.http.get(this.API_BASE_URL, {\n      params\n    }).pipe(map(response => this.parseNutritionResponse(response)), catchError(err => {\n      if (err.status === 404) {\n        return throwError(() => ({\n          notFound: true\n        }));\n      }\n      return throwError(() => err);\n    }));\n  }\n  /**\n   * Add a new ingredient to the API\n   */\n  addIngredient(ingredient) {\n    const url = 'https://api.abdulhabeeb.de/api/ingredients';\n    return this.http.post(url, ingredient, {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    });\n  }\n  /**\n   * Try to get nutrition info, and if not found, add it and then fetch again\n   */\n  getOrAddIngredient(ingredient) {\n    return this.getNutritionInfo(ingredient.name).pipe(catchError(err => {\n      if (err.notFound) {\n        // Add and then fetch again\n        return this.addIngredient(ingredient).pipe(switchMap(() => this.getNutritionInfo(ingredient.name)));\n      }\n      return throwError(() => err);\n    }));\n  }\n  /**\n   * Parse the API response to extract nutrition information\n   */\n  parseNutritionResponse(response) {\n    // The API returns a JSON object with nutritional values\n    return {\n      carbs: Number(response.carbs),\n      fat: Number(response.fat),\n      protein: Number(response.protein)\n    };\n  }\n  /**\n   * Submit two new ingredients (for demo/testing)\n   */\n  submitTwoIngredients() {\n    const ing1 = {\n      name: 'DemoIngredient1',\n      carbs: 10,\n      fat: 2,\n      protein: 3\n    };\n    const ing2 = {\n      name: 'DemoIngredient2',\n      carbs: 20,\n      fat: 5,\n      protein: 7\n    };\n    return this.addIngredient(ing1).pipe(switchMap(res1 => this.addIngredient(ing2).pipe(map(res2 => [res1, res2]))), catchError(err => {\n      console.error('Error submitting demo ingredients:', err);\n      return throwError(() => err);\n    }));\n  }\n  static {\n    this.ɵfac = function NutritionService_Factory(t) {\n      return new (t || NutritionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: NutritionService,\n      factory: NutritionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","HttpParams","throwError","catchError","map","switchMap","NutritionService","constructor","http","API_BASE_URL","getNutritionInfo","ingredientName","params","set","get","pipe","response","parseNutritionResponse","err","status","notFound","addIngredient","ingredient","url","post","headers","getOrAddIngredient","name","carbs","Number","fat","protein","submitTwoIngredients","ing1","ing2","res1","res2","console","error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/abdulhabeeb/recipe/src/app/services/nutrition.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\nexport interface NutritionInfo {\n    carbs: number;\n    fat: number;\n    protein: number;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NutritionService {\n    private readonly API_BASE_URL = 'https://api.abdulhabeeb.de/api/ingredients';\n\n    constructor(private http: HttpClient) { }\n\n    /**\n     * Fetch nutrition information for an ingredient\n     * @param ingredientName - The name of the ingredient to search for\n     * @returns Observable of NutritionInfo\n     */\n    getNutritionInfo(ingredientName: string): Observable<NutritionInfo> {\n        const params = new HttpParams().set('ingredient', ingredientName);\n        return this.http.get<any>(this.API_BASE_URL, { params }).pipe(\n            map(response => this.parseNutritionResponse(response)),\n            catchError(err => {\n                if (err.status === 404) {\n                    return throwError(() => ({ notFound: true }));\n                }\n                return throwError(() => err);\n            })\n        );\n    }\n\n    /**\n     * Add a new ingredient to the API\n     */\n    addIngredient(ingredient: { name: string; carbs: number; fat: number; protein: number }): Observable<any> {\n        const url = 'https://api.abdulhabeeb.de/api/ingredients';\n        return this.http.post(url, ingredient, {\n            headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n        });\n    }\n\n    /**\n     * Try to get nutrition info, and if not found, add it and then fetch again\n     */\n    getOrAddIngredient(ingredient: { name: string; carbs: number; fat: number; protein: number }): Observable<NutritionInfo> {\n        return this.getNutritionInfo(ingredient.name).pipe(\n            catchError(err => {\n                if (err.notFound) {\n                    // Add and then fetch again\n                    return this.addIngredient(ingredient).pipe(\n                        switchMap(() => this.getNutritionInfo(ingredient.name))\n                    );\n                }\n                return throwError(() => err);\n            })\n        );\n    }\n\n    /**\n     * Parse the API response to extract nutrition information\n     */\n    private parseNutritionResponse(response: any): NutritionInfo {\n        // The API returns a JSON object with nutritional values\n        return {\n            carbs: Number(response.carbs),\n            fat: Number(response.fat),\n            protein: Number(response.protein)\n        };\n    }\n\n    /**\n     * Submit two new ingredients (for demo/testing)\n     */\n    submitTwoIngredients(): Observable<any[]> {\n        const ing1 = { name: 'DemoIngredient1', carbs: 10, fat: 2, protein: 3 };\n        const ing2 = { name: 'DemoIngredient2', carbs: 20, fat: 5, protein: 7 };\n        return this.addIngredient(ing1).pipe(\n            switchMap(res1 => this.addIngredient(ing2).pipe(\n                map(res2 => [res1, res2])\n            )),\n            catchError(err => {\n                console.error('Error submitting demo ingredients:', err);\n                return throwError(() => err);\n            })\n        );\n    }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}